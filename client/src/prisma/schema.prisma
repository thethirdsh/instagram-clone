// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  name              String
  username          String    @unique
  email             String?   @unique
  password          String
  profileImage      String?
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  passwordChangedAt DateTime?
}

model Post {
  id             String    @id @default(uuid()) @db.Uuid
  caption        String?
  userId         String?   @db.Uuid
  user           User?     @relation(fields: [userId], references: [id])
  likes          Like[]
  total_likes    Int?      @default(0)
  comments       Comment[]
  total_comments Int?      @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Like {
  id        String    @id @default(uuid()) @db.Uuid
  postId    String?   @db.Uuid
  post      Post?     @relation(fields: [postId], references: [id])
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  postId    String?   @db.Uuid
  post      Post?     @relation(fields: [postId], references: [id])
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id])
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}